let e="subscribe",t="textContent",r="Attribute",s="set",l="remove",n="get"+r,i=n+"Names",a="appendChild",o=(e,r)=>[()=>e[t]=r],u=e=>e,c={},f=0,d=new DOMParser,h=document,b=e=>3===e.nodeType,v=e=>"function"==typeof e,p=(e="")=>{let t=e.charAt(0),r=".?@".includes(t);return[r?e.slice(1):e,t,r]},m=([e,n])=>(i,a)=>{switch(n){case".":i[e]=a;break;case"?":i[(a?s:l)+r](e,"");break;case"@":let{listener:n,options:o}=v(a)?{listener:a,options:!1}:a;i.addEventListener(e,n,o);break;default:b(i)?i[t]=a:i[s+r](e,a)}},g=(e,t,s)=>{void 0===s&&n in t&&(s=t[n](e));let i=p(e);return i[2]&&t[l+r](e),s in c&&(s=c[s]),[m(i),N(t,s,e)]},x=e=>e instanceof Signal,N=(t,r,s="")=>(x(r)?r=r[e](t,s):Array.isArray(r)&&x(r[0])&&(r=(0,r[1])(t,s)(r)),r),k=(e,r)=>{if(b(e)){let s=r[e[t]];if(null!=s){let r=e.parentNode,l=x(s)&&s;s=N(e,s),/string|number|boolean/.test(typeof s)?e[t]=s:r&&l&&"value"in l&&s instanceof Node&&(e.remove(),r.appendChild(s),l.value=r)}}if(v(e[i]))for(let t of e[i]()){let[r,s]=g(t,e);r(e,s)}};export let html=(e,...t)=>{let r=e.length,s=t.length,l=[];for(let n,i=0;i<r;i++)n=i<s?`_${++f}${1e18*Math.random()}_`:"",l[i]=e[i]+n,c[n]=t[i];return l.join("")};export let render=(e,t="",r)=>{let s=x(e);r=r??s?e.value:h.createDocumentFragment();let l=(i=t,n=d.parseFromString(i,"text/html"),n?.all[2].childNodes);var n,i;for(let e of l)r[a](e);for(let e=h.createTreeWalker(r,133,null);e.nextNode();)k(e.currentNode,c);return s?r:e?e[a](r):r};export class Signal{#e;#t;#r;constructor(e){this.#e=e,this.#t=new Set,this.#r=new WeakMap}subscribe(e,t,r=u){if(this.#t.add(e),x(e))return;let l=m(p(t)),n=this.#r.get(e)||new Set;return n.add(((e,t)=>l(t,r(e)))),this.#r[s](e,n),this.#e}get value(){return this.#e}set value(e){this.#e=e;for(let t of this.#t)if(x(t))t.value=void 0;else for(let r of this.#r.get(t)||o(t,e))r(e,t)}computed(t,r=[]){return r.forEach((e=>e.subscribe(this))),[this,(r,s)=>(this[e](r,s,t),t)]}}
